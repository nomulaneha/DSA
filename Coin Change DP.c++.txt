class Solution {
public:
    int results(vector<int>& coins, int i, int amount,  vector<vector<int>>& dp){
        if(i==0){
            if(amount%coins[i]==0) return amount/coins[i];
            else return 1e9;
        }
        if(dp[i][amount]!=-1) return dp[i][amount];
        int notTake = 0+results(coins, i-1, amount,dp);
        int take = 1e9;
        if(coins[i]<=amount) take = 1+results(coins, i, amount-coins[i],dp);
        return dp[i][amount]=min(notTake, take);
    }
    int coinChange(vector<int>& coins, int amount) {
        int n = coins.size();
        vector<int>prev(amount+1,0), cur(amount+1,0);
        for(int i=0;i<=amount;i++){
            if(i%coins[0]==0) prev[i] = i/coins[0];
            else prev[i]= 1e9;
        }
        for(int i=1;i<n;i++){
            for(int t=0;t<=amount;t++){
                int notTake = prev[t];
                int take = 1e9;
                if(coins[i]<=t) take = 1+cur[t-coins[i]];
                cur[t]=min(notTake, take);
        }
        prev = cur;
    }
    if(prev[amount]>=1e9) return -1;
    else return prev[amount];
    }
};