class Solution {
public:
    bool results(vector<int>& nums, int target, int i, vector<vector<int>>& dp){
        if(target==0) return true;
        if(i==0) return target==nums[0];
        if(dp[i][target]!=-1) return dp[i][target];
        bool one = results(nums, target, i-1, dp);
        bool two = false;
        if(nums[i]<=target) two = results(nums, target-nums[i], i-1, dp);
        return dp[i][target] = one||two; 
    }
    bool canPartition(vector<int>& nums) {
        int sum = 0;
        for(int i=0;i<nums.size();i++){
            sum+=nums[i];
        }
         if((sum&1)!=0) return false;
        int target = sum/2;
        vector<vector<bool>>dp(nums.size(),vector<bool>(target+1,false));
        for(int i=0;i<nums.size();i++){
            dp[i][0]=true;
        }
        if(nums[0]<=target) dp[0][nums[0]] = true;
        for(int i=1;i<nums.size();i++){
            for(int j=1;j<=target;j++){
                bool one = dp[i-1][j];
                bool two = false;
                if(nums[i]<=j) two = dp[i-1][j-nums[i]];
                dp[i][j] = one||two; 
            }
        }
        return dp[nums.size()-1][target];
    }    
};