class Solution {
public:
    int results(vector<vector<int>>& obstacleGrid, int i, int j, vector<vector<int>>& dp){
        if(i>=0 && j>=0 && obstacleGrid[i][j]==1) return 0;
        if(i==0 && j==0) return 1;
        if(i<0||j<0) return 0;
        if(dp[i][j]!=-1) return dp[i][j];
        int up = results(obstacleGrid, i-1, j, dp);
        int left = results(obstacleGrid, i, j-1, dp);
        return dp[i][j] = up+left;
    }
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int m = obstacleGrid.size();
        int n = obstacleGrid[0].size();
        vector<vector<int>>dp(m,vector<int>(n,0));
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(i>=0 && j>=0 && obstacleGrid[i][j]==1){
                    dp[i][j]=0;
                    continue;
                }
                if(i==0&&j==0){
                    dp[i][j]=1;
                    continue;
                }
                if(i>0) dp[i][j] = dp[i-1][j];
                if(j>0) dp[i][j]+=dp[i][j-1];
            }
        }
        return dp[m-1][n-1];
    }
};