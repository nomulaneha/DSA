class Solution {
public:
    int results(vector<vector<int>>& matrix, int i, int j, vector<vector<int>>& dp){
        if(j<0 || j>=matrix[0].size()) return 1e8;
        if(i==0) return matrix[i][j];
        if(dp[i][j]!=-1) return dp[i][j];
        int up = matrix[i][j]+results(matrix, i-1, j, dp);
        int ld = matrix[i][j]+results(matrix, i-1, j-1, dp);
        int rd = matrix[i][j]+results(matrix, i-1, j+1, dp);
        return dp[i][j] = min(up, min(ld, rd));
    }
    int minFallingPathSum(vector<vector<int>>& matrix) {
        int m = matrix.size();
        int n = matrix[0].size();
        vector<vector<int>>dp(m, vector<int>(n,-1));
        int mini = 1e8;
        for(int i=0;i<n;i++){
            dp[0][i] = matrix[0][i];
        }
        for(int i=1;i<m;i++){
            for(int j=0;j<n;j++){
                int up = matrix[i][j]+dp[i-1][j];
                int ld = matrix[i][j];
                if(j>0) ld+=dp[i-1][j-1]; else ld+=1e8;
                int rd = matrix[i][j];
                if(j<n-1) rd+=dp[i-1][j+1]; else rd+=1e8;
                dp[i][j] = min(up, min(ld, rd));
            }
        }
        for(int j=0;j<m;j++){
            mini = min(mini, dp[m-1][j]);
        }
        return mini;
    }
};