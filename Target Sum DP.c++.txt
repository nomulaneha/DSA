class Solution {
public:
    int results(int i, int target, vector<int>& nums, vector<vector<int>>& dp){
        if(i==0){
            if(nums[i]==0 && target==0) return 2;
            if(nums[i]==target || target==0) return 1;
            return 0;
        }
        if(dp[i][target]!=-1) return dp[i][target];
        int notTake = results(i-1, target, nums, dp);
        int take = 0;
        if(nums[i]<=target) take = results(i-1, target-nums[i], nums, dp);
        return dp[i][target] = notTake+take;
    }
    int findTargetSumWays(vector<int>& nums, int k) {
        int totalsum = 0;
        for(int i=0;i<nums.size();i++){
            totalsum+=nums[i];
        }
        if((totalsum-k)<0 || (totalsum-k)%2!=0) return 0;
        int target = (totalsum-k)/2;
        vector<vector<int>>dp(nums.size(), vector<int>(target+1,0));
        if(nums[0]==0) dp[0][0] = 2;
        else dp[0][0] = 1;
        if(nums[0]!=0 && nums[0]<=target) dp[0][nums[0]] = 1;
        for(int i=1;i<nums.size();i++){
            for(int t=0;t<=target;t++){
                int notTake = dp[i-1][t]; 
                int take = 0;
                if(nums[i]<=t) take = dp[i-1][t-nums[i]];
                dp[i][t] = notTake+take;
            }
        } 
        return dp[nums.size()-1][target];
    }
};